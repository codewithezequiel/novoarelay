create sequence "public"."clients_id_seq";

create sequence "public"."event_images_id_seq";

drop policy "Enable insert for users based on user_id" on "public"."events";

drop policy "admin_can_delete_company_events" on "public"."events";

drop policy "admin_can_edit_company_events" on "public"."events";

drop policy "admin_can_view_company_events" on "public"."events";

drop policy "employee_can_delete_own_events" on "public"."events";

drop policy "employee_can_edit_own_events" on "public"."events";

drop policy "employee_can_view_own_events" on "public"."events";

alter table "public"."truck_locations" drop constraint "fk_company";

alter table "public"."trucks" drop constraint "trucks_status_check";

drop function if exists "public"."nearby_events"(lat double precision, long double precision);

drop index if exists "public"."truck_locations_geo_index";

create table "public"."clients" (
    "id" integer not null default nextval('clients_id_seq'::regclass),
    "company_id" uuid,
    "name" text not null,
    "contact_number" character varying(20),
    "email" character varying(255),
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone default now(),
    "created_by" uuid default gen_random_uuid(),
    "address" text
);


alter table "public"."clients" enable row level security;

create table "public"."event_images" (
    "id" integer not null default nextval('event_images_id_seq'::regclass),
    "image_url" character varying(255) not null,
    "description" text,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone default now(),
    "event_id" bigint
);


alter table "public"."event_images" enable row level security;

create table "public"."maintenancerequests" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "description" text,
    "created_by" uuid not null default gen_random_uuid(),
    "request_title" text
);


alter table "public"."maintenancerequests" enable row level security;

alter table "public"."events" drop column "company_name";

alter table "public"."events" drop column "current_location";

alter table "public"."events" drop column "device_id";

alter table "public"."events" drop column "employee_full_name";

alter table "public"."events" add column "client_id" integer;

alter table "public"."events" add column "client_truck_license_plate" text;

alter table "public"."events" add column "client_truck_model" text;

alter table "public"."events" add column "client_truck_number" text;

alter table "public"."events" add column "client_truck_vin" text;

alter table "public"."events" alter column "pickup_location" drop not null;

alter table "public"."profiles" drop column "website";

alter table "public"."profiles" add column "current_location" gis.geography;

alter table "public"."profiles" add column "first_name" text;

alter table "public"."profiles" add column "last_name" text;

alter table "public"."profiles" add column "on_duty" boolean;

alter table "public"."profiles" add column "onboarding_completed" boolean default false;

alter table "public"."truck_locations" drop column "company_id";

alter table "public"."truck_locations" drop column "location";

alter table "public"."truck_locations" drop column "status";

alter table "public"."truck_locations" add column "event_id" bigint;

alter table "public"."trucks" drop column "status";

alter sequence "public"."clients_id_seq" owned by "public"."clients"."id";

alter sequence "public"."event_images_id_seq" owned by "public"."event_images"."id";

CREATE UNIQUE INDEX clients_pkey ON public.clients USING btree (id);

CREATE UNIQUE INDEX event_images_pkey ON public.event_images USING btree (id);

CREATE UNIQUE INDEX maintenancerequests_pkey ON public.maintenancerequests USING btree (id);

alter table "public"."clients" add constraint "clients_pkey" PRIMARY KEY using index "clients_pkey";

alter table "public"."event_images" add constraint "event_images_pkey" PRIMARY KEY using index "event_images_pkey";

alter table "public"."maintenancerequests" add constraint "maintenancerequests_pkey" PRIMARY KEY using index "maintenancerequests_pkey";

alter table "public"."clients" add constraint "clients_company_id_fkey" FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE not valid;

alter table "public"."clients" validate constraint "clients_company_id_fkey";

alter table "public"."event_images" add constraint "event_images_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE not valid;

alter table "public"."event_images" validate constraint "event_images_event_id_fkey";

alter table "public"."events" add constraint "events_client_id_fkey" FOREIGN KEY (client_id) REFERENCES clients(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."events" validate constraint "events_client_id_fkey";

alter table "public"."maintenancerequests" add constraint "maintenancerequests_created_by_fkey" FOREIGN KEY (created_by) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."maintenancerequests" validate constraint "maintenancerequests_created_by_fkey";

alter table "public"."truck_locations" add constraint "truck_locations_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."truck_locations" validate constraint "truck_locations_event_id_fkey";

grant delete on table "public"."clients" to "anon";

grant insert on table "public"."clients" to "anon";

grant references on table "public"."clients" to "anon";

grant select on table "public"."clients" to "anon";

grant trigger on table "public"."clients" to "anon";

grant truncate on table "public"."clients" to "anon";

grant update on table "public"."clients" to "anon";

grant delete on table "public"."clients" to "authenticated";

grant insert on table "public"."clients" to "authenticated";

grant references on table "public"."clients" to "authenticated";

grant select on table "public"."clients" to "authenticated";

grant trigger on table "public"."clients" to "authenticated";

grant truncate on table "public"."clients" to "authenticated";

grant update on table "public"."clients" to "authenticated";

grant delete on table "public"."clients" to "service_role";

grant insert on table "public"."clients" to "service_role";

grant references on table "public"."clients" to "service_role";

grant select on table "public"."clients" to "service_role";

grant trigger on table "public"."clients" to "service_role";

grant truncate on table "public"."clients" to "service_role";

grant update on table "public"."clients" to "service_role";

grant delete on table "public"."event_images" to "anon";

grant insert on table "public"."event_images" to "anon";

grant references on table "public"."event_images" to "anon";

grant select on table "public"."event_images" to "anon";

grant trigger on table "public"."event_images" to "anon";

grant truncate on table "public"."event_images" to "anon";

grant update on table "public"."event_images" to "anon";

grant delete on table "public"."event_images" to "authenticated";

grant insert on table "public"."event_images" to "authenticated";

grant references on table "public"."event_images" to "authenticated";

grant select on table "public"."event_images" to "authenticated";

grant trigger on table "public"."event_images" to "authenticated";

grant truncate on table "public"."event_images" to "authenticated";

grant update on table "public"."event_images" to "authenticated";

grant delete on table "public"."event_images" to "service_role";

grant insert on table "public"."event_images" to "service_role";

grant references on table "public"."event_images" to "service_role";

grant select on table "public"."event_images" to "service_role";

grant trigger on table "public"."event_images" to "service_role";

grant truncate on table "public"."event_images" to "service_role";

grant update on table "public"."event_images" to "service_role";

grant delete on table "public"."maintenancerequests" to "anon";

grant insert on table "public"."maintenancerequests" to "anon";

grant references on table "public"."maintenancerequests" to "anon";

grant select on table "public"."maintenancerequests" to "anon";

grant trigger on table "public"."maintenancerequests" to "anon";

grant truncate on table "public"."maintenancerequests" to "anon";

grant update on table "public"."maintenancerequests" to "anon";

grant delete on table "public"."maintenancerequests" to "authenticated";

grant insert on table "public"."maintenancerequests" to "authenticated";

grant references on table "public"."maintenancerequests" to "authenticated";

grant select on table "public"."maintenancerequests" to "authenticated";

grant trigger on table "public"."maintenancerequests" to "authenticated";

grant truncate on table "public"."maintenancerequests" to "authenticated";

grant update on table "public"."maintenancerequests" to "authenticated";

grant delete on table "public"."maintenancerequests" to "service_role";

grant insert on table "public"."maintenancerequests" to "service_role";

grant references on table "public"."maintenancerequests" to "service_role";

grant select on table "public"."maintenancerequests" to "service_role";

grant trigger on table "public"."maintenancerequests" to "service_role";

grant truncate on table "public"."maintenancerequests" to "service_role";

grant update on table "public"."maintenancerequests" to "service_role";

create policy "Allow select on clients for company"
on "public"."clients"
as permissive
for select
to public
using ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.company_id = clients.company_id)))));


create policy "Enable insert for authenticated users only"
on "public"."clients"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."clients"
as permissive
for select
to public
using (true);


create policy "admin_can_delete_events"
on "public"."events"
as permissive
for delete
to public
using ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.company_id = events.company_id) AND (profiles.role = 'admin'::text)))));


create policy "employee_and_admin_can_view_events"
on "public"."events"
as permissive
for select
to public
using (((user_id = auth.uid()) OR ((( SELECT profiles.role
   FROM profiles
  WHERE (profiles.id = auth.uid())) = 'admin'::text) AND (( SELECT profiles.company_id
   FROM profiles
  WHERE (profiles.id = auth.uid())) = company_id))));


create policy "update_event_based_on_company_or_admin"
on "public"."events"
as permissive
for update
to public
using (((company_id = ( SELECT profiles.company_id
   FROM profiles
  WHERE (profiles.id = auth.uid()))) OR (( SELECT profiles.role
   FROM profiles
  WHERE (profiles.id = auth.uid())) = 'admin'::text)));


create policy "Enable insert for authenticated users only"
on "public"."maintenancerequests"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."maintenancerequests"
as permissive
for select
to public
using (true);


create policy "Allow user to read their own profile"
on "public"."profiles"
as permissive
for select
to public
using ((auth.uid() = id));


create policy "Enable read access for all users"
on "public"."truck_locations"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."trucks"
as permissive
for select
to public
using (true);


create policy "delete_trucks_for_admin"
on "public"."trucks"
as permissive
for delete
to public
using (((company_id = ( SELECT profiles.company_id
   FROM profiles
  WHERE (profiles.id = auth.uid()))) AND (( SELECT profiles.role
   FROM profiles
  WHERE (profiles.id = auth.uid())) = 'admin'::text)));


create policy "insert_trucks_for_admin"
on "public"."trucks"
as permissive
for insert
to public
with check (((company_id = ( SELECT profiles.company_id
   FROM profiles
  WHERE (profiles.id = auth.uid()))) AND (( SELECT profiles.role
   FROM profiles
  WHERE (profiles.id = auth.uid())) = 'admin'::text)));


create policy "select_trucks_for_same_company"
on "public"."trucks"
as permissive
for select
to public
using ((company_id = ( SELECT profiles.company_id
   FROM profiles
  WHERE (profiles.id = auth.uid()))));


create policy "update_trucks_for_admin"
on "public"."trucks"
as permissive
for update
to public
using (((company_id = ( SELECT profiles.company_id
   FROM profiles
  WHERE (profiles.id = auth.uid()))) AND (( SELECT profiles.role
   FROM profiles
  WHERE (profiles.id = auth.uid())) = 'admin'::text)));



